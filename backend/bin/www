#!/usr/bin/env node

/**
 * Module dependencies.
 */

 var app = require('../app');
 var debug = require('debug')('backend:server');
 var http = require('http');
 
 /**
  * Get port from environment and store in Express.
  * 本番環境で環境変数PORTにポート番号を設定できる
  * normalizePort:環境変数の設定を判定
  */
 
 var port = normalizePort(process.env.PORT || '3000');
 app.set('port', port);
 
 /**
  * Create HTTP server.
  * httpモジュールを使わなくてもapp.listen(port)でサーバを起動できる
  */
 
 var server = http.createServer(app);
 
 /**
  * ADDED!! Require Socket.IO *追加
  */
var io = require('socket.io')(server);

 /**
  * Listen on provided port, on all network interfaces.
  * server.on()で各イベントにイベントハンドラーを設定
  */
 
 server.listen(port);
 server.on('error', onError);
 server.on('listening', onListening);
 
 /**
  * ADDED!! Socket.IO Connection. *追加
  */
 var mysql = require('mysql');
 const config  = require('../public/javascripts/db_config.js');
 
 io.on('connection', function (socket) {
   // フロント側からチャットが投下された時に発火するイベント
   socket.on('SEND_MESSAGE', function (data) {
 
     // コネクションの用意
     const connection = mysql.createConnection(config.mysql_setting);
 
     // レコード件数の取得
     connection.query(config.getHistoriesSQL, function (error, results, fields) {
       const countUpNum = results.length + 1;
       data.id = countUpNum
       results.push(data);
       // 後続の作業を待つ必要がないため、フロントに値を返す。
       io.emit('MESSAGE', results)
 
       // レコード挿入
       connection.query(config.insertRecordSQL, [countUpNum, data.user_id, data.message, data.create_date],
         function (error, results, fields) {
           // ログ出力
           if (!error) {
             console.log(`INSERT成功:${results}`);
           } else {
             console.log(`INSERT失敗:${error}`);
           }
         }
       );
     })
   });
 });
 
 /**
  * Normalize a port into a number, string, or false.
  */
 
 function normalizePort(val) {
   var port = parseInt(val, 10);
 
   if (isNaN(port)) {
     // named pipe
     return val;
   }
 
   if (port >= 0) {
     // port number
     return port;
   }
 
   return false;
 }
 
 /**
  * Event listener for HTTP server "error" event.
  */
 
 function onError(error) {
   if (error.syscall !== 'listen') {
     throw error;
   }
 
   var bind = typeof port === 'string'
     ? 'Pipe ' + port
     : 'Port ' + port;
 
   // handle specific listen errors with friendly messages
   switch (error.code) {
     case 'EACCES':
       console.error(bind + ' requires elevated privileges');
       process.exit(1);
       break;
     case 'EADDRINUSE':
       console.error(bind + ' is already in use');
       process.exit(1);
       break;
     default:
       throw error;
   }
 }
 
 /**
  * Event listener for HTTP server "listening" event.
  */
 
 function onListening() {
   var addr = server.address();
   var bind = typeof addr === 'string'
     ? 'pipe ' + addr
     : 'port ' + addr.port;
   debug('Listening on ' + bind);
 }
 